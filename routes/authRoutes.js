const express = require('express');
const bcrypt = require("bcryptjs");
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const User = require('../models/User');
const router = express.Router();

const sendVerificationEmail = async (email, otp) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.MAIL_USER,
      pass: process.env.MAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: '"ShopTFT üëæ" <no-reply@shoptft.com>',
    to: email,
    subject: 'M√£ x√°c th·ª±c t√†i kho·∫£n',
    html: `<h3>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: <b>${otp}</b></h3><p>Hi·ªáu l·ª±c trong 10 ph√∫t c·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√≠ t√†i kho·∫£n v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i</p>`
  });
};

router.post('/send-otp', async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });
  if (user) return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });

  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  const expires = new Date(Date.now() + 10 * 60 * 1000);

  const newUser = new User({ email, otp, otpExpires: expires, password: 'temporary' });
  await newUser.save();
  await sendVerificationEmail(email, otp);

  res.json({ success: true, message: 'ƒê√£ g·ª≠i m√£ x√°c th·ª±c t·ªõi email' });
});

router.post('/register', async (req, res) => {
  const { email, password, otp, name } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ message: 'Ch∆∞a g·ª≠i m√£ OTP' });
  if (user.verified) return res.status(400).json({ message: 'T√†i kho·∫£n ƒë√£ x√°c th·ª±c' });

  if (user.otp === otp && user.otpExpires > Date.now()) {
    const hashedPassword = await bcrypt.hash(password, 10);
    user.password = hashedPassword;
    user.name = name;
    user.verified = true;
    user.otp = null;
    user.otpExpires = null;
    await user.save();
    return res.json({ success: true, message: 'X√°c th·ª±c & ƒëƒÉng k√Ω th√†nh c√¥ng' });
  }

  return res.status(400).json({ message: 'M√£ kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user || !user.verified) return res.status(400).json({ message: 'Sai th√¥ng tin ho·∫∑c ch∆∞a x√°c th·ª±c' });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: 'Sai m·∫≠t kh·∫©u' });

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
  res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', token });
});

module.exports = router;
